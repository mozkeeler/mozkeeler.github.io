<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[mozkeeler]]></title>
  <link href="http://mozkeeler.github.io/atom.xml" rel="self"/>
  <link href="http://mozkeeler.github.io/"/>
  <updated>2015-03-02T15:31:25-08:00</updated>
  <id>http://mozkeeler.github.io/</id>
  <author>
    <name><![CDATA[David Keeler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Weekend With PAM]]></title>
    <link href="http://mozkeeler.github.io/blog/2015/02/02/my-weekend-with-pam/"/>
    <updated>2015-02-02T16:48:28-08:00</updated>
    <id>http://mozkeeler.github.io/blog/2015/02/02/my-weekend-with-pam</id>
    <content type="html"><![CDATA[<p>And now for something completely different: a man with a Yubico U2F key. Yubico manufactures some
hardware devices that implement various functionality like two-factor authentication,
one-time-passwords, and more generic hardware-security-modules, etc. if I understand correctly. The
U2F device is intended to be a &ldquo;universal two-factor&rdquo; product. Currently it&rsquo;s only supported in
Chrome. (That&rsquo;s part of why I have one - to see if Firefox can support this need for our users in a
way that&rsquo;s consistent with our mission.)</p>

<p>As part of familiarizing myself with the capabilities of the device, I checked out a few
repositories and found that with the addition of some udev rules, the device pretty much &ldquo;just
works&rdquo; as advertized. What it does is you register an application/origin/user on the device, which
spits back some JSON that you store on the &ldquo;server&rdquo;. Then, to authenticate to the server, you ask
it for a challenge, pipe that to a program that communicates with the device, and pipe the response
back to the server. If the math works out, the server is sufficiently convinced that you&rsquo;re in
possession of the device.</p>

<p>As I was fiddling around with these libraries, I thought, &ldquo;well, this is great, but what am I
actually going to use it for?&rdquo;. I don&rsquo;t run any sites at the moment, so it seemed like more work
than I wanted to do to set up a demo site and cobble together some sort of out-of-band
authentication (since Firefox doesn&rsquo;t support the device). Then, it occurred to me (or maybe I just
saw it in the documentation) that the U2F device can be used with a pluggable authentication module
(PAM) to authenticate a user to a system. I&rsquo;m a user. I have systems I authenticate to. This seemed
perfect. As an additional bonus, Yubico has already written such a module, so I didn&rsquo;t have to.</p>

<!--more-->


<p>After some false starts, I did get the PAM working with the U2F device. Since it wasn&rsquo;t quite as
easy as <code>wget http://insecure.url | sudo sh</code>, I figured it might be helpful to document what it
took to go from a system that didn&rsquo;t usefully recognize the device to being able to login with the
touch of a button. (Note that these instructions are for Fedora 20. As the ancient saying goes,
your mileage may vary.)</p>

<h4>udev rules</h4>

<p>Start by putting <a href="https://github.com/Yubico/libu2f-host/blob/master/70-u2f.rules">70-u2f.rules</a> in
<code>/etc/udev/rules.d</code> and restarting. If successful, you&rsquo;ll probably see something like so in
<code>dmesg</code> when you insert the device:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[26764.737757] hid-generic 0003:1050:0120.0011: hiddev0,hidraw3: USB HID v1.10 Device [Yubico Security Key by Yubico] on usb-0000:00:14.0-2/input0</span></code></pre></td></tr></table></div></figure>


<p>If that doesn&rsquo;t work, maybe you need to <code>sudo yum install hidapi</code> (and you might as well <code>sudo yum
install hidapi-devel</code>, since you&rsquo;ll need that later).</p>

<h4>libu2f-host and libu2f-server</h4>

<p>Yubico has written two main libraries that back U2F:
<a href="https://github.com/Yubico/libu2f-host">libu2f-host</a> and
<a href="https://github.com/Yubico/libu2f-server">libu2f-server</a>. You should be able to <code>git clone</code> them,
followed by <code>autoreconf --install</code>, <code>./configure</code>, <code>make check</code>, and <code>sudo make install</code>. This will
put them into <code>/usr/local/</code>. The dependencies I had to install were <code>gtk-doc</code>, <code>gengetopt</code>,
<code>help2man</code>, and <code>json-c-devel</code>.</p>

<h4>pam_u2f.so</h4>

<p>As I mentioned before, Yubico has written the PAM: <a href="https://github.com/Yubico/pam-u2f">pam-u2f</a>.
<code>git clone</code> that, then <code>autoreconf --install</code>, <code>./configure</code>, and <code>make check</code>. I had to install
<code>pam-devel</code> and <code>asciidoc</code> as dependencies.</p>

<p>This is where I ran into my first mystifying issue. I had installed libu2f-host and libu2f-server,
but configure (or rather pkg-config) claimed it couldn&rsquo;t find the libraries. After some fiddling
around, I ran <code>pkg-config --debug u2f-host</code> and found that it wasn&rsquo;t looking in
<code>/usr/local/lib/pkgconfig</code>, which is where libu2f-host and libu2f-server had installed their
pkg-config files. I&rsquo;m sure there&rsquo;s a proper way to fix this, but I just chose a folder where
pkg-config was looking and symlinked the .pc files there:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ln -s /usr/local/lib/pkgconfig/u2f-*.pc /usr/share/pkgconfig/</span></code></pre></td></tr></table></div></figure>


<p>After that configure worked fine.</p>

<p>After building, pam_u2f.so was in .lib. To
enable PAM to use it, I copied it to /lib/security: <code>cp
.lib/pam_u2f.so /lib/security</code>.</p>

<h4>Registering the U2F</h4>

<p>Before a device can authenticate itself to something using pam_u2f.so, it has to be registered.
There&rsquo;s a handy utility in that same repo called <code>pamu2fcfg</code>. That gets built along with the PAM
itself. You can specify an origin, appid, and username to register for, but I found that specifying
an origin didn&rsquo;t work (I didn&rsquo;t look too hard into what was going wrong, so it may just have been
me). Also, the username defaults to the current user, so in most cases you don&rsquo;t need to specify
it. <code>./pamu2fcfg</code> dumps out a string that should go in <code>~/.yubico/u2f_keys</code> (there&rsquo;s another way to
do this part, but this is easiest - see the Yubico documentation if you&rsquo;re curious).</p>

<h4>PAM</h4>

<p>The documentation for pam-u2f is a little vague on how to actually use pam_u2f.so for things like
logging in, unlocking gdm, or sudo. I found it worked if I added <code>auth sufficient pam_u2f.so</code> to
the top of <code>/etc/pam.d/system-auth</code> and <code>/etc/pam.d/gdm-password</code> (try adding &ldquo;debug&rdquo; to the end of
that line and running sudo for an idea of what&rsquo;s going on under the hood). The former handles many
scenarios like terminal login and sudo (I believe) while the latter does gdm login and unlocking
the screen.  Unfortunately, <code>/etc/pam.d/system-auth</code> says this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># This file is auto-generated.
</span><span class='line'># User changes will be destroyed the next time authconfig is run.</span></code></pre></td></tr></table></div></figure>


<p>so maybe this solution won&rsquo;t stick, but at least I know where to look in the future.</p>

<h4>&ldquo;sufficient&rdquo; vs. &ldquo;required&rdquo;</h4>

<p>Using &ldquo;sufficient&rdquo; causes the system to consider any authorization attempt as my regular user
successful with the touch of the button on the U2F device. This is not the safest way to run a
system. Using &ldquo;required&rdquo; instead causes the device to act more as it was intended (i.e. as a
second factor authentication token). This is great for security, but I better hope I don&rsquo;t lose the
device or it breaks (I could get two, register them both, and keep the second as a backup as
suggested by this
<a href="http://crashoverridenetwork.tumblr.com/post/109948061867/account-security-101-passwords-multifactor">article</a>).</p>

<p>And that&rsquo;s how my weekend went.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[History Lessons]]></title>
    <link href="http://mozkeeler.github.io/blog/2014/06/03/history-lessons/"/>
    <updated>2014-06-03T16:01:27-07:00</updated>
    <id>http://mozkeeler.github.io/blog/2014/06/03/history-lessons</id>
    <content type="html"><![CDATA[<p>This is a quick follow-up to my <a href="http://mozkeeler.github.io/blog/2014/05/28/personal-debug-number-ifdefs/">previous post</a>.
As a possible corrolary to <a href="http://meta.wikimedia.org/wiki/Cunningham%27s_Law">Cunningham&rsquo;s Law</a>,
it seems the best way to learn about the past on the Internet is to write an
uninformed blog post and have colleagues on Twitter fill you in.
Apparently using <code>#ifdef DEBUG_&lt;person&gt;</code> was common and even supported by
default by the build system (it would grab your login name and automatically
define DEBUG_\&lt;login>). There&rsquo;s a mozilla.dev.platform discussion about
removing it <a href="https://groups.google.com/forum/#!topic/mozilla.dev.platform/sL7bHH2zD1s">here</a>
and two <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=561674">related</a>
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=565191">bugs</a> for anyone
interested in the historical background.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Personal Debug #ifdefs]]></title>
    <link href="http://mozkeeler.github.io/blog/2014/05/28/personal-debug-number-ifdefs/"/>
    <updated>2014-05-28T16:55:17-07:00</updated>
    <id>http://mozkeeler.github.io/blog/2014/05/28/personal-debug-number-ifdefs</id>
    <content type="html"><![CDATA[<p>In looking at PSM code, I&rsquo;ve come across a practice that struck me as
undesirable. In the middle of some code I was attempting to understand stood
the line <code>#ifdef DEBUG_handle</code>, where <code>handle</code> was the IRC nickname of a
developer no longer involved with Mozilla. My inference is that this developer
essentially checked in to the tree a debug mode personally tailored to the work
they were doing. I think this is problematic for a few reasons.</p>

<p>First, using the pre-processor to optionally include extra code not normally
tested or even run means other changes can easily break it. This allows broken
(and even un-compilable) code to persist long after it should have been fixed
or removed.</p>

<p>Second, using a personalized debug flag increases the difficulty for others
involved with the affected code. At best, it requires others to know of this
undocumented extra functionality for it to be useful. At worst, it obfucates
the meaning of the code and confuses developers unfamiliar with it.
Furthermore, when the developer who added it ceases involvement with Mozilla,
this orphaned code will be left to rot forever, without anyone knowing that it
exists. This isn&rsquo;t a sentimental issue - the more cruft the tree collects, the
harder it becomes to maintain.</p>

<p>Development does often require conditionally enabling additional debugging
output. Luckily for Gecko hackers, we already have a logging infrastructure
where different modules can be told to spew varying levels of debugging
information via environment variables.
This is <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSPR/Reference/Logging">NSPR logging</a>,
and it&rsquo;s enabled by default in debug builds. Compared to personal debug
#ifdefs (which are undocumented and require first determining the correct
build flags and then rebuilding the tree from scratch), NSPR logging is much
more versatile.</p>

<p>Finally, this practice is unprofessional. For similar reasons as to why we
don&rsquo;t check in debugging printfs left over from the development process and why
we adhere to a particular coding style, code specific to one developer should
never be added to a public project being worked on by many people.</p>

<p>When I started writing this post, I was worried this would be seen as a
personal issue since I only knew of one developer who engaged in this practice.
As it turns out, many Mozilla developers have checked in their own <code>#ifdef
DEBUG_handle</code>, including coders I know and respect. Perhaps they have some
counter-points to what I&rsquo;ve brought up here. However, while I won&rsquo;t be removing
all such cases across the tree, I do intend to stop this practice in PSM code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nsConvertToActualKeyGenParams 2: Electric Boogaloo]]></title>
    <link href="http://mozkeeler.github.io/blog/2014/04/18/nsconverttoactualkeygenparams-2-electric-boogaloo/"/>
    <updated>2014-04-18T16:28:09-07:00</updated>
    <id>http://mozkeeler.github.io/blog/2014/04/18/nsconverttoactualkeygenparams-2-electric-boogaloo</id>
    <content type="html"><![CDATA[<p>As it turns out, untested code can contain multiple bugs. Here&rsquo;s some more
of <code>nsConvertToActualKeyGenParams</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">getNextNameValueFromECKeygenParamString</span><span class="p">(</span>
</span><span class='line'>          <span class="n">next_input</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">name_len</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">value_len</span><span class="p">,</span>
</span><span class='line'>          <span class="n">next_input</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">PL_strncmp</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="s">&quot;curve&quot;</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">min</span><span class="p">(</span><span class="n">name_len</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">curve</span> <span class="o">=</span> <span class="n">PL_strndup</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">value_len</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">PL_strncmp</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="s">&quot;popcert&quot;</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">min</span><span class="p">(</span><span class="n">name_len</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="kt">char</span> <span class="o">*</span><span class="n">certstr</span> <span class="o">=</span> <span class="n">PL_strndup</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">value_len</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">certstr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">keyPairInfo</span><span class="o">-&gt;</span><span class="n">ecPopCert</span> <span class="o">=</span> <span class="n">CERT_ConvertAndDecodeCertificate</span><span class="p">(</span><span class="n">certstr</span><span class="p">);</span>
</span><span class='line'>        <span class="n">PL_strfree</span><span class="p">(</span><span class="n">certstr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">keyPairInfo</span><span class="o">-&gt;</span><span class="n">ecPopCert</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="n">keyPairInfo</span><span class="o">-&gt;</span><span class="n">ecPopPubKey</span> <span class="o">=</span> <span class="n">CERT_ExtractPublicKey</span><span class="p">(</span><span class="n">keyPairInfo</span><span class="o">-&gt;</span><span class="n">ecPopCert</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">keyPairInfo</span><span class="o">-&gt;</span><span class="n">ecPopPubKey</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">returnParams</span> <span class="o">=</span> <span class="n">SECITEM_DupItem</span><span class="p">(</span><span class="o">&amp;</span><span class="n">keyPairInfo</span><span class="o">-&gt;</span><span class="n">ecPopPubKey</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">ec</span><span class="p">.</span><span class="n">DEREncodedParams</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>keyPairInfo-&gt;ecPopPubKey</code> is a <code>SECKEYPublicKey</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">SECKEYPublicKeyStr</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">PLArenaPool</span> <span class="o">*</span><span class="n">arena</span><span class="p">;</span>
</span><span class='line'>  <span class="n">KeyType</span> <span class="n">keyType</span><span class="p">;</span>
</span><span class='line'>  <span class="n">PK11SlotInfo</span> <span class="o">*</span><span class="n">pkcs11Slot</span><span class="p">;</span>
</span><span class='line'>  <span class="n">CK_OBJECT_HANDLE</span> <span class="n">pkcs11ID</span><span class="p">;</span>
</span><span class='line'>  <span class="k">union</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">SECKEYRSAPublicKey</span> <span class="n">rsa</span><span class="p">;</span>
</span><span class='line'>    <span class="n">SECKEYDSAPublicKey</span> <span class="n">dsa</span><span class="p">;</span>
</span><span class='line'>    <span class="n">SECKEYDHPublicKey</span>  <span class="n">dh</span><span class="p">;</span>
</span><span class='line'>    <span class="n">SECKEYKEAPublicKey</span> <span class="n">kea</span><span class="p">;</span>
</span><span class='line'>    <span class="n">SECKEYFortezzaPublicKey</span> <span class="n">fortezza</span><span class="p">;</span>
</span><span class='line'>    <span class="n">SECKEYECPublicKey</span>  <span class="n">ec</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="n">u</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">SECKEYPublicKeyStr</span> <span class="n">SECKEYPublicKey</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Recall that <code>certstr</code> comes more or less directly from
<code>window.crypto.generateCRMFRequest</code>, so it could be anything. This code passes
it to <code>CERT_ConvertAndDecodeCertificate</code> and then extracts the public key into
<code>keyPairInfo-&gt;ecPopPubKey</code>. The code then assumes that public key is an
elliptic curve key without checking first. It turns out, this can actually
crash Firefox.</p>

<p>It would be easy to say do not use union. Indeed, modern typesystems can be
quite helpful when different types of data can have similar operations
performed on them. However, seeing as we have a large amount of legacy code
that does use unions, we should probably put some effort into ensuring that
they&rsquo;re handled safely. In particular, that means always preceding the
de-unionification with a type check. And again, going back to writing
meaningful tests, when code expects a certain type of input, there should be
tests that give it something unexpected.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leaky Input Parsing in nsConvertToActualKeyGenParams]]></title>
    <link href="http://mozkeeler.github.io/blog/2014/04/16/leaky-input-parsing-in-nsconverttoactualkeygenparams/"/>
    <updated>2014-04-16T13:52:15-07:00</updated>
    <id>http://mozkeeler.github.io/blog/2014/04/16/leaky-input-parsing-in-nsconverttoactualkeygenparams</id>
    <content type="html"><![CDATA[<p>Consider the following code (modified for clarity):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">static</span> <span class="kt">void</span><span class="o">*</span>
</span><span class='line'><span class="n">nsConvertToActualKeyGenParams</span><span class="p">(</span><span class="n">uint32_t</span> <span class="n">keyGenMech</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">params</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">uint32_t</span> <span class="n">paramLen</span><span class="p">,</span> <span class="n">int32_t</span> <span class="n">keySize</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">nsKeyPairInfo</span> <span class="o">*</span><span class="n">keyPairInfo</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">curve</span> <span class="o">=</span> <span class="n">nullptr</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">next_input</span> <span class="o">=</span> <span class="n">params</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="n">nullptr</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">value</span> <span class="o">=</span> <span class="n">nullptr</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">name_len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">value_len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">getNextNameValueFromECKeygenParamString</span><span class="p">(</span>
</span><span class='line'>          <span class="n">next_input</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">name_len</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">value_len</span><span class="p">,</span>
</span><span class='line'>          <span class="n">next_input</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">PL_strncmp</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="s">&quot;curve&quot;</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">min</span><span class="p">(</span><span class="n">name_len</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">curve</span> <span class="o">=</span> <span class="n">PL_strndup</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">value_len</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">PL_strncmp</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="s">&quot;popcert&quot;</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">min</span><span class="p">(</span><span class="n">name_len</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="kt">char</span> <span class="o">*</span><span class="n">certstr</span> <span class="o">=</span> <span class="n">PL_strndup</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">value_len</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">certstr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">keyPairInfo</span><span class="o">-&gt;</span><span class="n">ecPopCert</span> <span class="o">=</span> <span class="n">CERT_ConvertAndDecodeCertificate</span><span class="p">(</span><span class="n">certstr</span><span class="p">);</span>
</span><span class='line'>        <span class="n">PL_strfree</span><span class="p">(</span><span class="n">certstr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">keyPairInfo</span><span class="o">-&gt;</span><span class="n">ecPopCert</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="n">keyPairInfo</span><span class="o">-&gt;</span><span class="n">ecPopPubKey</span> <span class="o">=</span> <span class="n">CERT_ExtractPublicKey</span><span class="p">(</span><span class="n">keyPairInfo</span><span class="o">-&gt;</span><span class="n">ecPopCert</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// further processing, etc.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The purpose of <code>nsConvertToActualKeyGenParams</code> is to parse and process a string
consisting of semicolon-delimited key:value pairs. The known keys are <code>"curve"</code>
and <code>"popcert"</code>. The function <code>getNextNameValueFromECKeygenParamString</code>
tokenizes the input. The only state that function keeps is how far along in
<code>params</code> it has gotten. Let&rsquo;s assume there&rsquo;s nothing wrong with it. If you&rsquo;re
the suspicious sort, you may have already noticed what can go wrong with
<code>nsConvertToActualKeyGenParams</code>.</p>

<p>What happens if a string like <code>"curve=secp521r1;curve=secp521r1"</code> is given as
its input? <code>curve</code> will first point to a freshly-allocated copy of
<code>"secp521r1"</code> and then it will point to another freshly-allocated copy of
<code>"secp521r1"</code>. Of course, the issue is not efficiency - it&rsquo;s that the
memory for that first copy has been leaked. Even worse, if multiple
<code>"popcert"</code> values are given, each one will leak an entire <code>CERTCertificate</code>.</p>

<p>If this were the argument-parsing code of a locally-run, non-setuid,
short-lived utility program, it would probably be no more than a
papercut-correctness bug. Sure, some memory could be leaked, but nobody would
call it with nonsensical input, right? Unfortunately this is more serious than
a local correctness issue. The input to <code>nsConvertToActualKeyGenParams</code> gets
passed unchanged from <code>window.crypto.generateCRMFRequest</code>, meaning that any
page on the internet could trigger this bug.</p>

<p>Looking at the history of this code, it appears to have landed as part of a
large commit with no tests. The reviewer even mentions that the key:value
parsing should be in its own function, which maybe would have made this bug
more obvious. My suggestions for how to avoid issues like this are probably
already familiar as best practices: large patches should be broken up into
smaller pieces, new functionality should be tested in a meaningful way, and
reviewers should be empowered to say, &ldquo;no, this will not land until these
requirements are met.&rdquo;</p>

<p>My understanding is that we have already adopted these practices as an
organization. The tricky part is making sure we adhere to them. Anecdotally,
features in early B2G builds would often regress due to a near absence of
tests. The engineers were obviously under a tight deadline, and I imagine it
was a natural reaction to neglect something not seen as essential: tests.
So, perhaps that&rsquo;s the answer: we need to ensure buy-in to the idea that tests
are as essential as the code itself.</p>

<p>That said, the presence of tests alone would not necessarily have caught
this bug. It would have required a test case with a duplicate key:value pair
and some sort of memory-leak detection. However, the act of writing tests may
have inspired the very question I asked early in this post, which could have
led to finding and fixing the bug.</p>

<p>For those curious, the fix for this code consisted of null-checking <code>curve</code> and
<code>keyPairInfo-&gt;ecPopPubKey</code> respectively before allocating and assigning to them
new memory.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's All This, Then?]]></title>
    <link href="http://mozkeeler.github.io/blog/2014/04/16/whats-all-this/"/>
    <updated>2014-04-16T10:57:38-07:00</updated>
    <id>http://mozkeeler.github.io/blog/2014/04/16/whats-all-this</id>
    <content type="html"><![CDATA[<p>While working on improving Firefox security code<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, I&rsquo;ve come across a few
things that make me go &ldquo;Hmmm&hellip;&rdquo;. Some of these are bugs and some are
practices that could lead to bugs, or at least make the code harder to
maintain. I thought it would be worthwhile to share what I&rsquo;ve learned.</p>

<p>Of course, I&rsquo;ve written my fair share of bugs and I&rsquo;m not immune to
writing difficult-to-maintain code. This is in no way meant to denigrate the
efforts of developers that have worked on this code before me. Indeed, without
them, there would be no security code in Firefox to work on. In general, I
won&rsquo;t be naming names or linking directly to changesets. Due to the nature of
open source, this information is available to those who choose to look for it.
However, my intention is not to talk about people but about process. In
particular, if we can examine the processes that led to the code in question,
hopefully we can improve how we currently write code, resulting in safer, more
easily maintained code.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I work on code in the module formally called the &ldquo;Personal Security Manager&rdquo;. I call it the &ldquo;Privacy and Security Module&rdquo;, or just &ldquo;PSM&rdquo; for short.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
